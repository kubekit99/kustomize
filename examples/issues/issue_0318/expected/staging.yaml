apiVersion: v1
data:
  AWS_LOAD_BALANCER_EXTRA_SECURITY_GROUP: aws.staging.load.balancer.extra.security.group
  AWS_LOAD_BALANCER_SSL_CERT: aws.staging.load.balancer.ssl.cert
  EXTERNAL_DNS: external.base.dns
  IAM_ZONE: iam-zone.staging.example.com
  SECRET_NAME: base.secret-name
  VOLUME_ID: base-volumneid
kind: ConfigMap
metadata:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-extra-security-group: aws.staging.load.balancer.extra.security.group
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: aws.staging.load.balancer.ssl.cert
  labels: {}
  name: public
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: external.base.dns
    service.beta.kubernetes.io/aws-load-balancer-extra-security-group: aws.staging.load.balancer.extra.security.group
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: aws.staging.load.balancer.ssl.cert
  name: ingress-validation-webhook
  namespace: ingress-nginx
spec:
  ports:
  - name: admission
    port: 443
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/name: ingress-nginx
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-extra-security-group: aws.staging.load.balancer.extra.security.group
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: aws.staging.load.balancer.ssl.cert
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  name: nginx-ingress-controller
  namespace: ingress-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      failure-domain.beta.kubernetes.io/zone: iam-zone.staging.example.com
  template:
    metadata:
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
        service.beta.kubernetes.io/aws-load-balancer-extra-security-group: aws.staging.load.balancer.extra.security.group
        service.beta.kubernetes.io/aws-load-balancer-ssl-cert: aws.staging.load.balancer.ssl.cert
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
    spec:
      containers:
      - args:
        - /nginx-ingress-controller
        - --configmap=$(POD_NAMESPACE)/nginx-configuration
        - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
        - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
        - --publish-service=$(POD_NAMESPACE)/ingress-nginx
        - --annotations-prefix=nginx.ingress.kubernetes.io
        - --validating-webhook=:8080
        - --validating-webhook-certificate=/usr/local/certificates/certificate.pem
        - --validating-webhook-key=/usr/local/certificates/key.pem
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: ingress-nginx:latest
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        name: nginx-ingress-controller
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        - containerPort: 8080
          name: webhook
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          runAsUser: 33
        volumeMounts:
        - mountPath: /usr/local/certificates/
          name: webhook-cert
          readOnly: true
      serviceAccountName: nginx-ingress-serviceaccount
      volumes:
      - awsElasiticBlockStore:
          volumeID: base-volumneid
        name: webhook-cert
        secret:
          secretName: base.secret-name
